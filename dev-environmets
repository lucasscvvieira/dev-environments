#!/bin/sh

#set -x

function container_exec() {
  eval "podman $@"
}

function container_image_filter() {
  local IMAGE=$1
  container_exec "images --filter \"reference=$IMAGE\" --format \"{{ index .Names 0 }}\""
}

function container_instance_filter() {
  local CONTAINER=$1
  local ALL=${2:-false}
  
  if [ "$ALL" = "true" ]; then
    container_exec "ps --all --filter \"name=$CONTAINER\" --format \"{{.Names}}\""
  else
    container_exec "ps --filter \"name=$CONTAINER\" --format \"{{.Names}}\""
  fi
}

function container_get_project_dir() {
  local CONTAINER_NAME=$1
  container_exec "inspect --format=\"{{ (index .Mounts 0).Source }}\" $CONTAINER_NAME"
}

function environment_create() {
  local PROJECT_NAME=$1
  local CONTAINER_IMAGE=dev-environments:$PROJECT_NAME
  
  if [ ! -z "$(container_image_filter $CONTAINER_IMAGE)" ]; then
    container_exec rmi $CONTAINER_IMAGE
  fi
  
  container_exec build \
    --build-arg USERNAME=$(id -nu) \
    --build-arg UID=$(id -u) \
    --build-arg GROUPNAME=$(id -ng) \
    --build-arg GID=$(id -g) \
    --tag $CONTAINER_IMAGE \
    --file ./images/pagarme/Containerfile.$PROJECT_NAME
}

function environment_instantiate() {
  local PROJECT_NAME=$1
  local PROJECT_DIR=$2
  local CONTAINER_IMAGE=dev-environments:$PROJECT_NAME
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME

  environment_remove $PROJECT_NAME
  environment_create $PROJECT_NAME
  
  container_exec create \
    --env TERM=xterm-256color \
    --name $CONTAINER_NAME \
    --network host \
    --hostname dev-environments \
    --ipc host \
    --pid host \
    --ulimit host \
    --userns keep-id \
    --user $(id -u):$(id -g) \
    --privileged \
    --volume $PROJECT_DIR:/home/$USER/$PROJECT_NAME \
    --volume $HOME/.ssh:/home/$USER/.ssh \
    $CONTAINER_IMAGE
}

function environment_start() {
  local PROJECT_NAME=$1
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME

  container_exec start $CONTAINER_NAME
}

function environment_stop() {
  local PROJECT_NAME=$1
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME
  
  if [ ! -z "$(container_instance_filter $CONTAINER_NAME)" ]; then
    container_exec stop $CONTAINER_NAME
  fi
}

function environment_enter() {
  local PROJECT_NAME=$1
  local PROJECT_DIR=$2
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME

  container_exec exec \
    --interactive \
    --tty \
    --env-file $(container_get_project_dir $CONTAINER_NAME)/.env \
    --user $(id -u):$(id -g) \
    $CONTAINER_NAME \
    tmux new -s $PROJECT_NAME
}

function environment_remove() {
  local PROJECT_NAME=$1
  local CONTAINER_IMAGE=dev-environments:$PROJECT_NAME
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME
  
  environment_stop $PROJECT_NAME
  
  if [ ! -z "$(container_instance_filter $CONTAINER_NAME true)" ]; then
    container_exec rm $CONTAINER_NAME
  fi
  
  if [ ! -z "$(container_image_filter $CONTAINER_IMAGE)" ]; then
    container_exec rmi $CONTAINER_IMAGE
  fi
}

function create() {
  while [[ "$#" -gt 0 ]]; do
    case $1 in
      -p|--project)
        local PROJECT_NAME=$2
        ;;

      -d|--directory)
        local PROJECT_DIR=$2
        ;;
    esac
    shift
  done
  
  if [ -z "$PROJECT_NAME" ]; then
    echo 'You need to pass a project name'
    exit 1
  fi
  
  if [ -z "$PROJECT_DIR" ]; then
    echo 'You need to pass a directory to mount inside the environment'
    exit 1
  fi
  
  environment_instantiate $PROJECT_NAME $PROJECT_DIR
}

function enter() {
  local PROJECT_NAME=$1
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME

  if [ -z "$(container_instance_filter $CONTAINER_NAME true)" ]; then
    echo 'Environment not found! Please use "dev-environments create" to create an environment'
    exit 1
  fi
  
  environment_start $PROJECT_NAME
  environment_enter $PROJECT_NAME
}

function start() {
  local PROJECT_NAME=$1
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME

  if [ -z "$(container_instance_filter $CONTAINER_NAME true)" ]; then
    echo 'Environment not found! Please use "dev-environments create" to create an environment'
    exit 1
  fi
  
  environment_start $PROJECT_NAME
}

function stop() {
  local PROJECT_NAME=$1
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME

  if [ -z "$(container_instance_filter $CONTAINER_NAME)" ]; then
    echo 'Environment not instantiated!'
    exit 1
  fi
  
  environment_stop $PROJECT_NAME
}

function remove() {
  local PROJECT_NAME=$1
  local CONTAINER_NAME=dev-environments-$PROJECT_NAME

  if [ -z "$(container_instance_filter $CONTAINER_NAME true)" ]; then
    echo 'Environment not instantiated!'
    exit 1
  fi
  
  environment_remove $PROJECT_NAME
}

function main() {
  case $1 in
    enter)
      shift
      enter $@
      ;;

    start)
      shift
      start $@
      ;;

    stop)
      shift
      stop $@
      ;;

    remove)
      shift
      remove $@
      ;;
      
    create)
      shift
      create $@
  esac
}

main $@
